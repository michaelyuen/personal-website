"use strict";var app=angular.module("emoji",["ngRoute","parse-angular","ui.bootstrap","ui.validate","ui.gravatar","customFilters","landing_page","signup_login","settings","publish","post_feedback","fb_insights"]);app.config(["$routeProvider",function($routeProvider){Parse.initialize("0yybeV0LfOy8kPPsgF3DVPmTItNpFufmrU2HW7C8","gDmvUjMCmOv0Ut0lzYWm9AmuNn5pTvkMKOnH232z");$routeProvider.otherwise({redirectTo:"/"})}]);app.run(["$rootScope","$location","authService","userService",function($rootScope,$location,authService,userService){if(userService.getCurrent()){var user=userService.getCurrent();$rootScope.is_logged_in=true;$rootScope.mode=user.mode}$rootScope.$on("$routeChangeStart",function(event,next,current){if(next.originalPath=="/settings"&&($rootScope.mode!="user"&&$rootScope.mode!="owner")){$location.path("/publish")}else if(next.originalPath!=""&&!authService.authorize(next.access)){if($rootScope.is_logged_in){$location.path("/publish")}else{$location.path("/login")}}})}]);app.controller("topPageController",["$rootScope","$scope","$location","userService","authService","socialMediaService",function($rootScope,$scope,$location,userService,authService,socialMediaService){if($location.path()==""&&$rootScope.is_logged_in){$location.path("/publish")}$rootScope.social={fb:false,fbPages:false,twitter:false,linkedin:false,google:false};$scope.$watchCollection(function(){return userService.getCurrent()},function(new_user){$scope.user=new_user;if($scope.user){if($scope.user.owner){$scope.user.owner.fetch();$scope.only_user=false}else{if($scope.user.teams&&$scope.user.teams.length!=0){$scope.only_user=false}else{$scope.only_user=true}}if($scope.user.teams){for(var i=0;i<$scope.user.teams.length;i++){$scope.user.teams[i].fetch().then(function(team){if($rootScope.mode!="user"&&$rootScope.mode!="owner"){if($rootScope.mode==team.id){$scope.team_name=team.name}}})}}if($scope.user.facebookAuthData){$rootScope.social.fb=true}if($scope.user.twitterAuthData){$rootScope.social.twitter=true}}$scope.show_accounts=false},true);$scope.show_accounts=false;$scope.menu_open=false;$scope.selectAccount=function(type){$rootScope.mode=type;$scope.user.mode=type;userService.updateUser($scope.user,function(){if(type!="user"&&type!="owner"){for(var i=0;i<$scope.user.teams.length;i++){if($scope.user.teams[i].id==type){$scope.team_name=$scope.user.teams[i].name;break}}if($location.path()=="/settings"){$location.path("/")}}},function(){logService.log("error","Problem switching modes. Please try again.",false,true)})};$scope.toggleAccounts=function(){if(!$scope.only_user){$scope.show_accounts=!$scope.show_accounts}};$scope.toggleMenu=function(){$scope.menu_open=!$scope.menu_open};$scope.closeMenu=function(){$scope.menu_open=false};$scope.logout=function(){$scope.menu_open=false;authService.logout();$location.path("/")}}]);app.service("authService",function($rootScope,userService,logService){var access_levels={"public":["public","user","admin"],anon:["public"],user:["user","admin"],admin:["admin"]},current_user=userService.getCurrent()||{role:"public"};this.authorize=function(level){if(access_levels[level].indexOf(current_user.role)!=-1){return true}else{return false}};this.signup=function(user,success,error){var secureData=userService.createSecureUser();user.secureUserData=secureData;user.signUp(null,{success:function(user){Parse.User.logOut();logService.log("success","Signed up: "+user.email,true,false);success(user)},error:function(user,err){logService.log("error",err.message,true,true);error()}})};this.login=function(user,success,error){Parse.User.logIn(user.email,user.password,{success:function(user){if(user.attributes.emailVerified){current_user=user;$rootScope.is_logged_in=true;if(user.attributes.mode!="user"&&user.attributes.mode!="owner"){var id=user.attributes.mode;var is_valid=false;for(var i=0;i<user.attributes.teams.length;i++){if(id==user.attributes.teams[i].id){is_valid=true;break}}if(is_valid){$rootScope.mode=user.attributes.mode}else{$rootScope.mode="user";user.set("mode","user");userService.updateUser(user,function(){},function(){})}}else{$rootScope.mode=user.attributes.mode}success()}else{var email=user.email;user.email="";user.email=email;userService.updateUser(user,function(){logService.log("error","User tried to log in with unverified email: "+user.email,true,false);Parse.User.logOut();error("Check your email to verify your account and get started.")},function(){Parse.User.logOut();error("The email or password is incorrect. Please try again.")})}},error:function(user,err){logService.log("error",err.message+": "+user.email,true,false);error("The email or password is incorrect. Please try again.")}})};this.logout=function(){Parse.User.logOut();$rootScope.is_logged_in=false;current_user={role:"public"}};this.pwReset=function(email,success,error){Parse.User.requestPasswordReset(email,{success:function(){logService.log("success","Pw reset requested: "+email,true,false);success()},error:function(err){logService.log("error",err.message,true,false);error()}})};this.createTestAccount=function(test_user,success){var secureData=userService.createSecureUser();secureData.liveBalance=0;secureData.testBalance=50;test_user.secureData=secureData;test_user.signUp(null,{success:function(user){current_user=user;$rootScope.is_logged_in=true;success()},error:function(user,error){logService.log("error",err.message,true,false)}})}});angular.module("Modal",[]).controller("ModalController",function($scope,$modalInstance){$scope.ok=function(){$modalInstance.close()};$scope.cancel=function(){$modalInstance.dismiss("cancel")}});angular.module("customFilters",[]).filter("capitalizeFirstLetter",function(){return function(input){if(input==undefined){return}if(Array.isArray(input)){var new_array=[];for(var i=0;i<input.length;i++){var string=input[i];new_array[i]=string[0].toUpperCase()+string.substr(1)}return new_array}else{return input[0].toUpperCase()+input.substr(1)}}}).filter("repeatNTimes",function(){return function(array,n){if(n==undefined)n=0;else n=Math.round(n);return new Array(n)}}).filter("commaSeparatedList",function(){return function(array){if(!Array.isArray(array)){return array}return array.join(", ")+"."}}).filter("addProtocol",function(){return function(url){if(url.indexOf("http")==-1){return"//"+url}else{return url}}}).filter("phonenumber",function(){return function(number){if(!number){return""}number=String(number);var formattedNumber=number;var c=number[0]=="1"?"1 ":"";number=number[0]=="1"?number.slice(1):number;var area=number.substring(0,3);var front=number.substring(3,6);var end=number.substring(6,10);if(front){formattedNumber=c+"("+area+") "+front}if(end){formattedNumber+="-"+end}return formattedNumber}}).filter("notInArray",function($filter){return function(list,arrayFilter,element){if(arrayFilter){return $filter("filter")(list,function(listItem){if(element){return arrayFilter.indexOf(listItem[element])==-1}else{return arrayFilter.indexOf(listItem)==-1}})}}}).filter("summary",function($filter){return function(text,limit){if(text&&text.length>limit){return $filter("limitTo")(text,limit)+"..."}else{return text}}});app.service("logService",function(){this.warning={type:"",message:"",isNew:false};var self=this;var generic="Something went wrong. Please try again.";function init(){Parse.Object.extend({className:"log",initialize:function(){parseDot(this,["type","message"])}})}this.log=function(type,message,logOnParse,displayToUser){if(logOnParse){var log=new Parse.Object("log");log.type=type;log.message=message;log.save()}if(displayToUser){self.warning.type=type;self.warning.message=message=="generic"?generic:message;self.warning.isNew=true}};init()});app.service("orgService",function(logService,userService){var businesses=[];var organization={};var self=this;function init(){Parse.Object.extend({className:"teams",initialize:function(){parseDot(this,["name","members","owner","secureTeamData","facebookAuthData","facebookPagesAuthData","twitterAuthData","googleAuthData","linkedInAuthData","deleted"])}})}this.createOrganization=function(name,success,error){organization=new Parse.Object("teams");organization.owner=userService.getCurrent()._toPointer();organization.name=name;var secureData=userService.createSecureUser();organization.secureTeamData=secureData;organization.save(null,{success:function(new_org){logService.log("success","Created Organization: "+new_org.name,true,false);success(new_org)},error:function(new_org,err){logService.log("error",err.message,true,false);error()}})};this.updateOrganization=function(org,success,error){org.save(null,{success:function(new_org){success(new_org)},error:function(new_org,err){logService.log("error",err.message,true,false);error()}})};init()});app.service("socialMediaService",function($window,logService){var self=this;var FB={};function init(){Parse.Object.extend({className:"facebookAuthData",initialize:function(){parseDot(this,["shortTermToken","longTermToken","refreshToken","lastRefresh"])}})}this.fbAuth=function(success,error){FB=$window.FB;FB.login(function(response){if(response.status==="connected"){var x=new Parse.Object("facebookAuthData");x.set("shortTermToken",response.authResponse.accessToken);x.save(null,{success:function(new_fb){success(new_fb)},error:function(new_org,err){logService.log("error",err.message,true,false);error()}})}},{scope:"publish_actions, user_friends",return_scopes:true})};this.twitterAuth=function(success,error){var x=new Parse.Object("twitterAuthData");x.save(null,{success:function(new_twitter){Parse.Cloud.run("twitterRequestToken",{auth:x._toPointer()}).then(function(data){var url="https://api.twitter.com/oauth/authenticate?oauth_token="+data.requestToken;window.open(url,"Login with Twitter","height=400,width=550");success(new_twitter)})},error:function(new_org,err){logService.log("error",err.message,true,false);error()}})};init()});app.service("userService",function(logService){var self=this;function init(){Parse.Object.extend({className:"_User",initialize:function(){parseDot(this,["username","password","email","role","mode","deleted","secureUserData","owner","teams","facebookAuthData","facebookPagesAuthData","twitterAuthData","googleAuthData","linkedInAuthData"])}});Parse.Object.extend({className:"secureUserData",initialize:function(){parseDot(this,["stripeCustomerId"])}});Parse.Object.extend({className:"teams",initialize:function(){parseDot(this,["name","members","owner","secureTeamData","facebookAuthData","facebookPagesAuthData","twitterAuthData","googleAuthData","linkedInAuthData","deleted"])}})}this.getCurrent=function(){return Parse.User.current()};this.createUser=function(){return new Parse.Object("_User")};this.createSecureUser=function(){return new Parse.Object("secureUserData")};this.updateUser=function(user,success,error){user.save(null,{success:function(updated_user){success()},error:function(updated_user,err){logService.log("error",err.message,true,false);error()}})};this.deleteUser=function(user,success,error){user.deleted=true;user.username="deleted"+Math.random().toString(16);user.email="deleted"+Math.random().toString(16)+"_"+user.email;user.save(null,{success:function(deleted_user){logService.log("success","Deleted user: "+deleted_user.email,true,false);success()},error:function(deleted_user,err){logService.log("error",err.message,true,false);error()}})};this.getUser=function(email,success,error){var query=new Parse.Query("_User");query.equalTo("email",email);query.first({success:function(user){if(user){success(user)}else{error()}},error:function(err){logService.log("error",err.message,true,false);error()}})};init()});"use strict";angular.module("fb_insights",["ngRoute","chart.js"]).config(["$routeProvider",function($routeProvider){$routeProvider.when("/fb-insights",{templateUrl:"views/fb_insights/fb_insights.html",controller:"FbInsightsController",access:"user"})}]).controller("FbInsightsController",["$rootScope","$scope","userService",function($rootScope,$scope,userService){$rootScope.page_name="FB Insights";$rootScope.stylesheet="fb_insights";$scope.likes_by_region={likes:[500,300,100,50],country:["United States","Canada","Mexico","Cuba"]};$scope.likes_by_demographic={likes:[[65,59,80,81,56,55],[28,48,40,19,86,27]],total_likes:0,series:["Male","Female"],ages:["13-17","18-24","25-34","45-54","55-64","65+"],colours:["#609ccf","#da218a"]};for(var i=0;i<$scope.likes_by_demographic.likes.length;i++){for(var x=0;x<$scope.likes_by_demographic.likes[i].length;x++){$scope.likes_by_demographic.total_likes+=$scope.likes_by_demographic.likes[i][x]}}$scope.daily_likes={likes:[[650,925,615,555,726,699,801],[25,33,21,16,26,44,30]],series:["Likes","Unlikes"],date:["5/21","5/22","5/23","5/24","5/25","5/26","5/27"],colours:["#609ccf","#f06a5e"]};$scope.post_likes={likes:[[50,25,15,55,26,99,21],[5,3,11,16,6,4,13]],series:["Likes","Comments"],date:["5/21","5/22","5/23","5/24","5/25","5/26","5/27"],colours:["#609ccf","#60cf82"]}}]);"use strict";angular.module("landing_page",["ngRoute"]).config(["$routeProvider",function($routeProvider){$routeProvider.when("/",{templateUrl:"views/landing_page/landing_page.html",controller:"LandingPageController",access:"public"})}]).controller("LandingPageController",["$rootScope","$scope","$location","userService",function($rootScope,$scope,$location,userService){$rootScope.page_name="Landing Page";$rootScope.stylesheet="landing_page";$location.hash(null)}]);"use strict";angular.module("post_feedback",["ngRoute","isteven-multi-select"]).config(["$routeProvider",function($routeProvider){$routeProvider.when("/post-feedback",{templateUrl:"views/post_feedback/post_feedback.html",controller:"PostFeedbackController",access:"user"})}]).controller("PostFeedbackController",["$rootScope","$scope","userService","logService",function($rootScope,$scope,userService,logService){$rootScope.page_name="Post Feedback";$rootScope.stylesheet="post_feedback";$rootScope.warning=logService.warning;$scope.social_networks=[{icon:"<img src='assets/img/icon_facebook.png' />",name:"Facebook",ticked:true},{icon:"<img src='assets/img/icon_twitter.png' />",name:"Twitter",ticked:false},{icon:"<img src='assets/img/icon_linkedin.png' />",name:"LinkedIn",ticked:true},{icon:"<img src='assets/img/icon_googleplus.png' />",name:"Google+",ticked:false}];var today=new Date;$scope.today=today;$scope.start_date=new Date((new Date).setDate(today.getDate()-30));$scope.end_date=today;$scope.max_date=today;$scope.open=function(type){if(type=="start"){$scope.is_open_start=true}if(type=="end"){$scope.is_open_end=true}}}]);"use strict";angular.module("publish",["ngRoute"]).config(["$routeProvider",function($routeProvider){$routeProvider.when("/publish",{templateUrl:"views/publish/publish.html",controller:"PublishController",access:"user"})}]).controller("PublishController",["$rootScope","$scope","$location","logService",function($rootScope,$scope,$location,logService){$rootScope.page_name="Publish";$rootScope.stylesheet="publish";$rootScope.warning=logService.warning;$location.hash(null);$scope.current_tab="preview";$scope.selectTab=function(tab){$scope.current_tab=tab};$scope.min_date=new Date;$scope.pub_date=new Date;$scope.pub_time=new Date;$scope.mstep=15}]);"use strict";angular.module("settings",["ngRoute","Modal","angularPayments"]).config(["$routeProvider",function($routeProvider){$routeProvider.when("/settings",{templateUrl:"views/settings/settings.html",controller:"SettingsController",access:"user"})}]).controller("SettingsController",["$rootScope","$scope","$location","$modal","logService","userService","authService","orgService","socialMediaService",function($rootScope,$scope,$location,$modal,logService,userService,authService,orgService,socialMediaService){$rootScope.page_name="Settings";$rootScope.stylesheet="settings";$rootScope.warning=logService.warning;if($location.hash()){$scope.active_card=$location.hash()}else{$location.hash("profile");$scope.active_card="profile"}$scope.partial_url="views/settings/"+$scope.active_card+".html";$scope.selectPanel=function(card){$location.hash(card);$scope.active_card=card;$scope.partial_url="views/settings/"+card+".html"};$scope.user=userService.getCurrent();$scope.organization={};$rootScope.$watch("mode",function(new_mode,old_mode){if(new_mode=="user"){$scope.user.secureUserData.fetch().then(function(){if($scope.user.secureUserData.stripeCustomerId){var data={stripe_customer_id:$scope.user.secureUserData.stripeCustomerId};Parse.Cloud.run("loadCC",data,{success:function(result){$scope.current_number=result.card+" ending in "+result.last4;$scope.current_expiry=result.expiry;$scope.current_card=$scope.current_number+", Expires: "+$scope.current_expiry},error:function(error){console.error(error)}})}else{$scope.current_card="No card on file."}})}if($scope.user.owner){$scope.organization=$scope.user.owner;$scope.organization.fetch().then(function(){if($scope.organization.members){for(var i=0;i<$scope.organization.members.length;i++){$scope.organization.members[i].fetch()}}if(new_mode=="owner"){$scope.organization.secureTeamData.fetch().then(function(){if($scope.organization.secureTeamData.stripeCustomerId){var data={stripe_customer_id:$scope.organization.secureTeamData.stripeCustomerId};Parse.Cloud.run("loadCC",data,{success:function(result){$scope.current_number=result.card+" ending in "+result.last4;$scope.current_expiry=result.expiry;$scope.current_card=$scope.current_number+", Expires: "+$scope.current_expiry},error:function(error){console.error(error)}})}else{$scope.current_card="No card on file."}})}})}});$scope.pw={current:"","new":"",confirm:""};$scope.updatePassword=function(){authService.login({email:$scope.user.email,password:$scope.pw.current},function(){$scope.user.password=$scope.pw.new;userService.updateUser($scope.user,function(){logService.log("success","Successfully updated password.",false,true)},function(){logService.log("error","generic",false,true)})},function(err){logService.log("error","Current Password did not match.",false,true)})};$scope.stripeCallback=function(code,result){if(result.error){logService.log("error",result.error.message,false,true)}else{var data={card:result.id};Parse.Cloud.run("updateCC",data,{success:function(result){logService.log("success","Successfully updated credit card.",false,true);var number=result.card+" ending in "+result.last4;var expiry=result.expiry;$scope.current_card=number+", Expires: "+expiry},error:function(error){logService.log("error",error.message,false,true);console.error(error)}})}};$scope.fbAuth=function(){socialMediaService.fbAuth(function(new_fb){if($scope.user.facebookAuthData){$scope.user.facebookAuthData.push(new_fb._toPointer())}else{$scope.user.facebookAuthData=[new_fb._toPointer()]}userService.updateUser($scope.user,function(){$rootScope.social.fb=true},function(){})},function(){})};$scope.twitterAuth=function(){socialMediaService.twitterAuth(function(new_twitter){if($scope.user.twitterAuthData){$scope.user.twitterAuthData.push(new_twitter._toPointer())}else{$scope.user.twitterAuthData=[new_twitter._toPointer()]}userService.updateUser($scope.user,function(){$rootScope.social.twitter=true},function(){})},function(){})};$scope.saveOrgName=function(){if($scope.user.owner){orgService.updateOrganization($scope.organization,function(new_org){logService.log("success","Successfully Updated Organization",false,true)},function(){logService.log("error","generic",false,true)})}else{orgService.createOrganization($scope.organization.name,function(new_org){$scope.user.owner=new_org._toPointer();$scope.user.mode="owner";userService.updateUser($scope.user,function(){$rootScope.mode="owner"},function(){logService.log("error","generic",false,true)})},function(){logService.log("error","generic",false,true)})}};$scope.removeMember=function(member){$scope.modal_title="Remove User?";$scope.modal_body=member.email+" will be removed from "+$scope.organization.name+".";var modal_instance=$modal.open({templateUrl:"partials/modal.html",controller:"ModalController",scope:$scope});modal_instance.result.then(function(){$scope.organization.members.splice($scope.organization.members.indexOf(member),1);orgService.updateOrganization($scope.organization,function(new_org){var data={};data.type="remove";data.user=member.id;data.org=new_org.id;Parse.Cloud.run("updateUserTeams",data,{success:function(){},error:function(error){logService.log("error",error.message,false,true);console.error(error)}})},function(){logService.log("error","generic",false,true)})},function(){})};$scope.member={};$scope.addMember=function(){var new_member=$scope.member.add;$scope.member.add="";if(new_member==$scope.user.email){logService.log("error","Sorry, you can't add yourself to your own team.",false,true)}else{userService.getUser(new_member,function(user){var is_new=true;if(user.teams){for(var i=0;i<user.teams.length;i++){if(user.teams[i].id==$scope.organization.id){is_new=false}}}if(is_new){if($scope.organization.members){$scope.organization.members.push(user._toPointer())}else{$scope.organization.members=[user._toPointer()]}orgService.updateOrganization($scope.organization,function(new_org){var data={};data.type="add";data.user=user.id;data.org=new_org.id;Parse.Cloud.run("updateUserTeams",data,{success:function(){},error:function(error){logService.log("error",error.message,false,true);console.error(error)}})},function(){logService.log("error","generic",false,true)})}else{logService.log("error",user.email+" is already on this team.",false,true)}},function(){var data={};data.user=new_member;data.org=$scope.organization.id;Parse.Cloud.run("inviteTeamMember",data,{success:function(){logService.log("success",new_member+" has been sent an invitation to join your team.",false,true)},error:function(error){logService.log("error",error.message,false,true);console.error(error)}})})}};$scope.deleteAccount=function(){$scope.modal_title="Delete Account?";$scope.modal_body="Your account and organization will be permanently removed.";var modal_instance=$modal.open({templateUrl:"partials/modal.html",controller:"ModalController",scope:$scope});modal_instance.result.then(function(){if($scope.user.teams){for(var i=0;i<$scope.user.teams.length;i++){var data={};data.user=$scope.user.id;data.org=$scope.user.teams[i].id;Parse.Cloud.run("removeTeamMember",data,{success:function(){},error:function(error){logService.log("error",error.message,true,false)}})}}if($scope.organization.members){for(var i=0;i<$scope.organization.members.length;i++){var data={};data.type="remove";data.user=$scope.organization.members[i].id;data.org=$scope.organization.id;Parse.Cloud.run("updateUserTeams",data,{success:function(){},error:function(error){logService.log("error",error.message,true,false)}})}}$scope.organization.deleted=true;orgService.updateOrganization($scope.organization,function(deleted_org){userService.deleteUser($scope.user,function(){authService.logout();$location.path("/")},function(){logService.log("error","generic",false,true)})},function(){logService.log("error","generic",false,true)})},function(){})};$scope.deleteOrganization=function(){$scope.modal_title="Delete Organization?";$scope.modal_body=$scope.organization.name+" will be permanently removed.";var modal_instance=$modal.open({templateUrl:"partials/modal.html",controller:"ModalController",scope:$scope});modal_instance.result.then(function(){if($scope.organization.members){for(var i=0;i<$scope.organization.members.length;i++){var data={};data.type="remove";data.user=$scope.organization.members[i].id;data.org=$scope.organization.id;Parse.Cloud.run("updateUserTeams",data,{success:function(){},error:function(error){logService.log("error",error.message,true,false)}})}}$scope.user.unset("owner");if($rootScope.mode=="owner"){$scope.user.mode="user"}userService.updateUser($scope.user,function(){$scope.organization.deleted=true;orgService.updateOrganization($scope.organization,function(deleted_org){$scope.organization={};$rootScope.mode="user";logService.log("success","Successfully deleted organization.",false,true)},function(){logService.log("error","generic",false,true)})},function(){logService.log("error","generic",false,true)})},function(){})}}]);"use strict";var signupLoginControllers=angular.module("signup_login",["ngRoute"]);signupLoginControllers.config(["$routeProvider",function($routeProvider){$routeProvider.when("/signup",{templateUrl:"views/signup_login/signup_login.html",controller:"SignupController",access:"anon"}).when("/login",{templateUrl:"views/signup_login/signup_login.html",controller:"LoginController",access:"anon"}).when("/forgot-password",{templateUrl:"views/signup_login/signup_login.html",controller:"ForgotPwController",access:"anon"}).when("/invites/:invite_id",{templateUrl:"views/signup_login/signup_login.html",controller:"InviteController",access:"anon"})}]);signupLoginControllers.controller("SignupController",["$rootScope","$scope","$location","logService","authService","userService",function($rootScope,$scope,$location,logService,authService,userService){$rootScope.page_name="Sign Up";$rootScope.stylesheet="signup_login";$rootScope.warning=logService.warning;$scope.new_user=userService.createUser();$scope.is_user_created=false;$scope.saveNewUser=function(){$scope.new_user.username=$scope.new_user.email;$scope.new_user.role="user";$scope.new_user.mode="user";authService.signup($scope.new_user,function(user){$scope.is_user_created=true},function(){})}}]);signupLoginControllers.controller("LoginController",["$rootScope","$scope","$location","logService","authService",function($rootScope,$scope,$location,logService,authService){$rootScope.page_name="Log In";$rootScope.stylesheet="signup_login";$rootScope.warning=logService.warning;$scope.new_user={};$scope.login=function(){authService.login($scope.new_user,function(){$location.path("/publish")},function(error){logService.log("error",error,false,true)})}}]);signupLoginControllers.controller("ForgotPwController",["$rootScope","$scope","$location","logService","authService",function($rootScope,$scope,$location,logService,authService){$rootScope.page_name="Forgot Password";$rootScope.stylesheet="signup_login";$rootScope.warning=logService.warning;$scope.new_user={};$scope.pwReset=function(){authService.pwReset($scope.new_user.email,function(){$scope.reset_email_sent=true;$scope.new_user.email=""},function(){logService.log("error","generic",false,true)})};$scope.tryAgain=function(){$scope.reset_email_sent=false}}]);signupLoginControllers.controller("InviteController",["$rootScope","$scope","$routeParams","$location","logService","authService","userService","orgService",function($rootScope,$scope,$routeParams,$location,logService,authService,userService,orgService){$rootScope.page_name="Sign Up";$rootScope.stylesheet="signup_login";$rootScope.warning=logService.warning;var invite_id=$routeParams.invite_id;var invite;var team;var query=new Parse.Query("invites");query.include("team");query.get(invite_id,{success:function(inv){invite=inv;team=inv.get("team");if(invite.get("active")){$scope.new_user=userService.createUser();$scope.is_user_created=false;$scope.saveNewUser=function(){$scope.new_user.username=$scope.new_user.email;$scope.new_user.role="user";$scope.new_user.mode="user";$scope.new_user.teams=[team];authService.signup($scope.new_user,function(user){$scope.is_user_created=true;invite.set("active",false);invite.save(null,{success:function(updated_invite){},error:function(updated_invite,err){}});if(team.members){team.members.push(user._toPointer())}else{team.members=[user._toPointer()]}orgService.updateOrganization(team,function(new_org){},function(){})},function(){})}}else{logService.log("error","This invitation link has already been used, but you can still sign up.",false,true);$location.path("/signup")}},error:function(inv,err){}})}]);
//# sourceMappingURL=app.min.js.map